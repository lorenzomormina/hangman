
std::unordered_map<char, std::vector<int>> get_char_indices(const std::string& str) {
    std::unordered_map<char, std::vector<int>> char_indices;
    for (size_t i = 0; i < str.size(); ++i) {
        char_indices[str[i]].push_back(i);
    }
    return char_indices;
}

void suggest()
{
    vector<string> matchingWords;

    for (auto& word : wordList)
    {
        if (word.size() != secretWord.value.size())
            continue;

        for (auto& c : word)
        {
            if (wrongLetters.value.find(c) != string::npos)
                goto end_it;
        }

        for (int i = 0; i < word.size(); ++i)
        {
            if (publicWord.value[i] != '_' && publicWord.value[i] != word[i])
                goto end_it;
        }

        {
            auto publicIndices = get_char_indices(publicWord.value);
            auto wordIndices = get_char_indices(word);

            for (auto& pair : publicIndices)
            {
                if (pair.first == '_')
                    continue;
                if (pair.second != wordIndices[pair.first])
                    goto end_it;
            }

        }

        matchingWords.push_back(word);

    end_it:
        continue;
    }



    //for (auto& word : matchingWords)
    //{
    //    cout << word << '\n';
    //}
    //cout << endl;
}